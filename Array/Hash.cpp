#include "Hash.h"

/**
\brief Таблица перестановки 256 энементов для алгоритма хеширования Пирсона
*/
static const ui8 T[256] = {
    249, 232, 89, 20, 244, 97, 50, 114, 220, 107, 86, 150, 67, 233, 42, 226,
    209, 3, 206, 74, 207, 180, 85, 216, 21, 191, 246, 82, 137, 186, 128, 40,
    172, 15, 96, 93, 152, 60, 240, 95, 122, 2, 164, 33, 112, 17, 201, 129,
    22, 248, 225, 132, 76, 163, 127, 139, 118, 57, 136, 8, 37, 245, 195, 16,
    43, 87, 69, 0, 39, 188, 254, 130, 251, 213, 243, 222, 78, 223, 6, 228,
    231, 211, 106, 119, 124, 174, 155, 14, 189, 29, 101, 113, 70, 196, 18, 173,
    35, 167, 229, 92, 239, 157, 83, 28, 25, 212, 215, 237, 203, 62, 10, 156,
    160, 63, 59, 9, 79, 44, 141, 47, 34, 252, 158, 90, 64, 68, 27, 170,
    56, 49, 108, 146, 5, 236, 100, 55, 26, 178, 175, 241, 65, 110, 54, 159,
    147, 205, 135, 224, 198, 61, 120, 1, 154, 208, 7, 126, 138, 32, 161, 53,
    165, 71, 148, 73, 13, 94, 11, 84, 38, 104, 77, 45, 81, 131, 193, 255,
    234, 88, 217, 179, 4, 116, 219, 145, 168, 75, 171, 204, 192, 140, 166, 185,
    30, 218, 151, 48, 24, 176, 80, 143, 149, 153, 51, 210, 121, 58, 235, 200,
    125, 103, 197, 177, 184, 221, 181, 52, 19, 230, 242, 134, 109, 123, 31, 187,
    12, 111, 23, 238, 253, 36, 98, 66, 247, 117, 227, 133, 72, 169, 102, 41,
    105, 46, 190, 214, 194, 250, 199, 91, 202, 162, 142, 182, 183, 99, 144, 115
};

/**
\brief   Генерация 64 битного хеша по алгоритму Пирсона
\param   [in]   data   Указатель на массив, по которому строится хеш
\param   [in]   len    Размер передаваемого массива
\return  Возвращается 64 битных хеш, сгенерированный по алгоритму Пирсона
*/
static Hash pearson(const void* data, ui32 len)
{
    const char* ptr = (const char*)data;
    union
    {
        ui64 hash;
        ui8 hPtr[8];
    }Hash;
    ui8 h = 0;
    for (int j = 0; j < 8; j++)
    {
        h = T[(ptr[0] + j) % 256];
        for (int i = 0; i < len; i++)
            h = T[h^ptr[i]];
        Hash.hPtr[j] = h;
    }
    return Hash.hash;
}

/**
\brief   Генерация 64 битного хеша польномиальным алгоритмом 
\param   [in]   data   Указатель на массив, по которому строится хеш
\param   [in]   len    Размер передаваемого массива
\return  Возвращается 64 битных хеш, сгенерированный по полиномиальнму алгоритму
*/
static Hash polynomial(const void* data, ui32 len)
{
    const char* ptr = (const char*)data;
    Hash h = 0;
    for (ui32 i = 0; i < len; i++)
        h = h * 71 + ptr[i];
    return h;
}


// TODO: сделать программную возможность выбора алгоритма хеширования

/**
\brief   Генерация 64 битного хеша
\param   [in]   data   Указатель на массив, по которому строится хеш
\param   [in]   len    Размер передаваемого массива
\return  Возвращается 64 битных хеш
\note    В Hash.cpp приведено несколько реализаций алгоритма хеширования
         но данная функция использует только один вариант из набора алгоритмов
*/
Hash getHash(const void* data, ui32 len)
{
    return polynomial(data, len);
}